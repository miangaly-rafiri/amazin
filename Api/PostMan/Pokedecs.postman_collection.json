{
	"info": {
		"_postman_id": "20edd246-7ed3-4797-a1e2-175b8e60d8fe",
		"name": "Pokedecs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31426121"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "1. User",
					"item": [
						{
							"name": "1. Register and Login",
							"item": [
								{
									"name": "Resgister",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const name = pm.variables.get('user_name');\r",
													"const email = pm.variables.get('user_email');\r",
													"const password = pm.variables.get('user_password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (name && email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", name, email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"name\": name,\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"    pm.collectionVariables.set('email', email);\r",
													"    pm.collectionVariables.set('password', password);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Amine\",\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/register",
											"host": [
												"{{URL}}"
											],
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email');\r",
													"const password = pm.variables.get('password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. GET User/me/id",
							"item": [
								{
									"name": "Get Users",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Me",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Users ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const user_id = pm.variables.get('id_user');\r",
													"console.log(user_id)\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/:id",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "3. Update",
							"item": [
								{
									"name": "Update_Me",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" const requestBody = {\r",
													"        \"name\": \"superUser\"\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AmineT\",\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const user_id = pm.variables.get('id_user');\r",
													"const requestBody = {\r",
													"        \"name\": \"superUser1\"\r",
													"    };\r",
													"\r",
													"console.log(user_id)\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"pm.request.body.raw = JSON.stringify(requestBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/:id",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Logout",
							"item": [
								{
									"name": "Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/logout",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email');\r",
													"const password = pm.variables.get('password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout All",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/logout/all",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"logout",
												"all"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. Delete",
							"item": [
								{
									"name": "Login_test_del_user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email');\r",
													"const password = pm.variables.get('password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resgister_test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const name = pm.variables.get('user_name');\r",
													"const email = pm.variables.get('user_email');\r",
													"const password = pm.variables.get('user_password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (name && email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", name, email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"name\": name,\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"    pm.collectionVariables.set('email', email);\r",
													"    pm.collectionVariables.set('password', password);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Amine\",\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/register",
											"host": [
												"{{URL}}"
											],
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login_test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email');\r",
													"const password = pm.variables.get('password');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"amine@g.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const user_id = pm.variables.get('id_user');\r",
													"\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2. Admin",
					"item": [
						{
							"name": "1. Login_Admin",
							"item": [
								{
									"name": "Resgister_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const name = pm.variables.get('name_Admin');\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (name && email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", name, email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"name\": name,\r",
													"        \"email\": email,\r",
													"        \"password\": password,\r",
													"        \"isAdmin\": true\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"    pm.collectionVariables.set('email', email);\r",
													"    pm.collectionVariables.set('password', password);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Admin32\",\r\n    \"email\": \"admin32@example.com\",\r\n    \"password\": \"adminpassword\",\r\n    \"isAdmin\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/register",
											"host": [
												"{{URL}}"
											],
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login_Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin32@example.com\",\r\n    \"password\": \"adminpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2. GET User/me/id_Admin",
							"item": [
								{
									"name": "Users_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Me_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Users ID_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const user_id = pm.variables.get('id_user');\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/:id",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												":id"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "3. Update_Admin",
							"item": [
								{
									"name": "Update_Me_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" const requestBody = {\r",
													"        \"name\": \"superAdmin\"\r",
													"    };\r",
													"\r",
													"pm.request.body.raw = JSON.stringify(requestBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin320@example.com\",\r\n    \"password\": \"adminpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update_id_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const user_id = pm.variables.get('id_user');\r",
													"const requestBody = {\r",
													"        \"name\": \"superAdmin1\"\r",
													"    };\r",
													"\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));\r",
													"pm.request.body.raw = JSON.stringify(requestBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin3209@example.com\",\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/:id",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Logout_Admin",
							"item": [
								{
									"name": "Logout_Admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/logout",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login_Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin3209@example.com\",\r\n    \"password\": \"adminpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout All_Admin",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/logout/all",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"logout",
												"all"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5. Delete Copy",
							"item": [
								{
									"name": "Login_test_del_Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin3209@example.com\",\r\n    \"password\": \"adminpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resgister_test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const name = pm.variables.get('name_Admin');\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (name && email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", name, email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"name\": name,\r",
													"        \"email\": email,\r",
													"        \"password\": password,\r",
													"        \"isAdmin\": true\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"    pm.collectionVariables.set('email', email);\r",
													"    pm.collectionVariables.set('password', password);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Admin32\",\r\n    \"email\": \"admin32@example.com\",\r\n    \"password\": \"adminpassword\",\r\n    \"isAdmin\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/register",
											"host": [
												"{{URL}}"
											],
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login_test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const authToken = pm.response.json().authToken;\r",
													"const user = pm.response.json().user._id\r",
													"\r",
													"if (authToken) {\r",
													"    pm.collectionVariables.set('token', authToken);\r",
													"    pm.collectionVariables.set('Authorization', `Bearer ${authToken}`);\r",
													"    pm.collectionVariables.set('id_user', user);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Récupère les données de l'utilisateur à partir des variables d'environnement\r",
													"const email = pm.variables.get('email_Admin');\r",
													"const password = pm.variables.get('password_Admin');\r",
													"\r",
													"// Vérifie si les données de l'utilisateur sont définies\r",
													"if (email && password) {\r",
													"    console.log(\"User data retrieved successfully:\", email, password);\r",
													"\r",
													"    // Construit le corps de la requête en utilisant les données de l'utilisateur\r",
													"    const requestBody = {\r",
													"        \"email\": email,\r",
													"        \"password\": password\r",
													"    };\r",
													"\r",
													"    // Définit le corps de la requête avec les données de l'utilisateur\r",
													"    pm.request.body.raw = JSON.stringify(requestBody);\r",
													"} else {\r",
													"    console.error(\"User data not found in environment variables\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin32@example.com\",\r\n    \"password\": \"adminpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/users/login",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"const user_id = pm.variables.get('id_user');\r",
													"pm.request.url.update(pm.request.url.toString().replace(':id', user_id));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/users/me",
											"host": [
												"{{URL}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Pokemons",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Pokemons",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/pokemon",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pokemons_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const pokemon_id = pm.variables.get('id_pokemon');\r",
											"pm.request.url.update(pm.request.url.toString().replace(':id', pokemon_id));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/pokemon/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Add_pokemon",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody = {\r",
											"    \"name\": \"c'est qu'un test\",\r",
											"    \"hp\": 25,\r",
											"    \"cp\": 5,\r",
											"    \"picture\": \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r",
											"    \"types\": [\"Plante\", \"Poison\"]\r",
											"    };\r",
											"\r",
											"pm.request.body.raw = JSON.stringify(requestBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const _id = pm.response.json()._id\r",
											"\r",
											"if (_id) {\r",
											"    pm.collectionVariables.set('id_pokemon', _id);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/pokemon/add",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pokemons_Admin",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/pokemon",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pokemons_id_Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const pokemon_id = pm.variables.get('id_pokemon');\r",
											"pm.request.url.update(pm.request.url.toString().replace(':id', pokemon_id));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/pokemon/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Pokemon",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const pokemon_id = pm.variables.get('id_pokemon');\r",
											"pm.request.url.update(pm.request.url.toString().replace(':id', pokemon_id));\r",
											"\r",
											"const requestBody = {\r",
											"    \"hp\": 100,\r",
											"    \"cp\": 100\r",
											"    };\r",
											"\r",
											"pm.request.body.raw = JSON.stringify(requestBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/pokemon/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pokemon",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const pokemon_id = pm.variables.get('id_pokemon');\r",
											"pm.request.url.update(pm.request.url.toString().replace(':id', pokemon_id));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/pokemon/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"pokemon",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Récupère le token de la variable de collection\r",
					"const authToken = pm.collectionVariables.get('token');\r",
					"\r",
					"// Vérifie si le token est défini\r",
					"if (authToken) {\r",
					"    // Ajoute le token comme en-tête Authorization Bearer à chaque requête\r",
					"    pm.request.headers.add({key: 'Authorization', value: `Bearer ${authToken}`});\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "Authorization",
			"value": ""
		},
		{
			"key": "user_name",
			"value": "hadi123",
			"type": "string"
		},
		{
			"key": "user_email",
			"value": "hadi123@gmail.com",
			"type": "string"
		},
		{
			"key": "user_password",
			"value": "hadi12343",
			"type": "string"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "name_Admin",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "email_Admin",
			"value": "admin@example.com",
			"type": "string"
		},
		{
			"key": "password_Admin",
			"value": "adminpassword",
			"type": "string"
		},
		{
			"key": "id_user",
			"value": ""
		},
		{
			"key": "id_pokemon",
			"value": ""
		}
	]
}